name: Flutter Build APK Robuste

on:
  push:
    branches: [main] # Déclenche le workflow sur les push vers la branche main
  workflow_dispatch: # Permet de déclencher le workflow manuellement depuis l'interface GitHub

env:
  # Nous n'avons plus besoin de définir FLUTTER_VERSION ici car nous spécifions le canal directement dans l'étape setup.
  # FLUTTER_VERSION: "stable"

jobs:
  build:
    runs-on: ubuntu-latest # Exécute le job sur un runner Ubuntu
    timeout-minutes: 45 # Augmentation du timeout pour les builds potentiellement longs

    steps:
      - name: Checkout code
        # Utilise l'action checkout pour récupérer le code de votre dépôt
        uses: actions/checkout@v4

      - name: Setup Java
        # Configure l'environnement Java nécessaire pour le build Android (Gradle)
        uses: actions/setup-java@v3
        with:
          # Java 17 est recommandé pour les versions récentes de Flutter et Gradle
          java-version: '17'
          distribution: 'temurin' # Utilise la distribution Temurin (Eclipse Adoptium)
          cache: 'gradle' # Active le cache Gradle pour accélérer les builds suivants

      - name: Setup Flutter
        # Configure l'environnement Flutter en spécifiant le canal stable.
        # L'action téléchargera la dernière version stable disponible.
        uses: subosito/flutter-action@v2
        with:
          # flutter-version n'est plus spécifié ici, car nous utilisons le canal.
          channel: stable # Spécifie explicitement le canal stable
          cache: true # Active le cache Flutter pour accélérer les builds suivants

      - name: Get dependencies
        # Exécute 'flutter pub get' pour télécharger les dépendances du projet
        # C'est une étape essentielle pour s'assurer que toutes les librairies sont disponibles
        run: |
          echo "Exécution de 'flutter pub get'..."
          flutter pub get
          echo "'flutter pub get' terminée."

      - name: Check Flutter Doctor
        # Exécute flutter doctor pour vérifier l'état de l'environnement Flutter
        # Utile pour le débogage si des problèmes de configuration persistent
        run: |
          echo "Exécution de 'flutter doctor'..."
          flutter doctor
          echo "'flutter doctor' terminée."

      - name: Attempt to re-configure Android project files
        # Exécute flutter create pour s'assurer que les fichiers Android sont correctement configurés.
        # Cela peut aider à résoudre les problèmes de projet "unsupported" ou d'autres incohérences.
        # L'option '--platforms android .' tente de configurer la plateforme Android dans le répertoire courant.
        # Nous utilisons '|| true' pour que cette étape ne fasse pas échouer le workflow si elle rencontre une erreur,
        # nous permettant d'inspecter les logs des étapes suivantes.
        run: |
          echo "Tentative de re-configuration des fichiers de projet Android avec 'flutter create --platforms android .'."
          flutter create --platforms android . || true
          echo "'flutter create --platforms android .' command tentée."

      - name: Clean Flutter project
        # Nettoie les artefacts des builds précédents.
        # Souvent utile pour résoudre des problèmes de build causés par des caches obsolètes.
        # Ajout de '|| true' pour ne pas faire échouer le workflow si le clean rencontre un problème mineur.
        run: |
          echo "Exécution de 'flutter clean'..."
          flutter clean || true
          echo "'flutter clean' terminée."

      - name: Build APK
        # Exécute la commande de build pour générer l'APK de release.
        # --release : Construit une version optimisée pour la publication.
        # --verbose : Fournit des informations détaillées pendant le build, utile pour le débogage.
        # L'étape échouera si le build ne réussit pas, ce qui est le comportement attendu.
        run: |
          echo "Démarrage du build APK..."
          flutter build apk --release --verbose
          echo "Commande de build APK terminée."

      - name: Verify APK
        # Vérifie que le fichier APK a bien été généré à l'emplacement attendu.
        # Cette étape échouera si le fichier n'est pas trouvé.
        run: |
          APK_PATH="build/app/outputs/flutter-apk/app-release.apk"
          echo "Vérification de l'APK à l'emplacement : $APK_PATH"
          if [ ! -f "$APK_PATH" ]; then
            echo "::error::APK non généré à $APK_PATH"
            exit 1
          else
            echo "APK généré avec succès : $APK_PATH"
            ls -lh "$APK_PATH" # Affiche les détails du fichier APK
          fi

      - name: Upload APK
        # Charge l'APK généré en tant qu'artefact de workflow.
        # Cela rend l'APK disponible pour le téléchargement depuis la page du workflow.
        uses: actions/upload-artifact@v4
        with:
          name: app-release-apk # Nom de l'artefact
          path: build/app/outputs/flutter-apk/app-release.apk # Chemin du fichier à uploader
          retention-days: 7 # Durée de conservation de l'artefact (en jours)
