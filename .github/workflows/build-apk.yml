name: Flutter Build APK

on:
  push:
    branches: [main] # Déclenche le workflow sur les push vers la branche main
  workflow_dispatch: # Permet de déclencher le workflow manuellement depuis l'interface GitHub

env:
  # Spécifiez la version de Flutter. Utilisez une version stable si possible,
  # ou celle qui est connue pour fonctionner avec votre projet.
  # La version 3.29.3 est conservée ici comme dans votre workflow original.
  FLUTTER_VERSION: "3.29.3"

jobs:
  build:
    runs-on: ubuntu-latest # Exécute le job sur un runner Ubuntu

    steps:
      - name: Checkout code
        # Utilise l'action checkout pour récupérer le code de votre dépôt
        uses: actions/checkout@v4

      - name: Setup Java
        # Configure l'environnement Java nécessaire pour le build Android (Gradle)
        uses: actions/setup-java@v3
        with:
          # Java 17 est recommandé pour les versions récentes de Flutter et Gradle
          java-version: '17'
          distribution: 'temurin' # Utilise la distribution Temurin (Eclipse Adoptium)

      - name: Setup Flutter
        # Configure l'environnement Flutter
        uses: subosito/flutter-action@v2
        with:
          # Utilise la version de Flutter spécifiée dans les variables d'environnement
          flutter-version: ${{ env.FLUTTER_VERSION }}
          # Le 'channel' n'est pas spécifié ici pour permettre à l'action
          # de trouver la version exacte. Si vous utilisez une version stable,
          # vous pourriez ajouter 'channel: stable'.

      - name: Get dependencies
        # Exécute 'flutter pub get' pour télécharger les dépendances du projet
        # C'est une étape essentielle pour s'assurer que toutes les librairies sont disponibles
        run: |
          echo "Running 'flutter pub get'..."
          flutter pub get
          echo "'flutter pub get' completed."

      - name: Clean Flutter project
        # Nettoie les artefacts des builds précédents
        # Souvent utile pour résoudre des problèmes de build causés par des caches obsolètes
        run: |
          echo "Running 'flutter clean'..."
          flutter clean
          echo "'flutter clean' completed."

      - name: Build APK
        # Exécute la commande de build pour générer l'APK de release
        # --release : Construit une version optimisée pour la publication
        # --verbose : Fournit des informations détaillées pendant le build, utile pour le débogage
        run: |
          echo "Starting APK build..."
          flutter build apk --release --verbose
          echo "APK build command finished."

      - name: Verify APK
        # Vérifie que le fichier APK a bien été généré à l'emplacement attendu
        run: |
          APK_PATH="build/app/outputs/flutter-apk/app-release.apk"
          echo "Checking for APK at: $APK_PATH"
          if [ ! -f "$APK_PATH" ]; then
            echo "::error::APK not generated at $APK_PATH"
            exit 1
          else
            echo "APK generated successfully: $APK_PATH"
            ls -lh "$APK_PATH" # Affiche les détails du fichier APK
          fi

      - name: Upload APK
        # Charge l'APK généré en tant qu'artefact de workflow
        # Cela rend l'APK disponible pour le téléchargement depuis la page du workflow
        uses: actions/upload-artifact@v4
        with:
          name: app-release-apk # Nom de l'artefact
          path: build/app/outputs/flutter-apk/app-release.apk # Chemin du fichier à uploader
          retention-days: 7 # Durée de conservation de l'artefact (en jours)
