name: Flutter Build Pipeline

on:
  push:
    branches: [main]
  workflow_dispatch:

env:
  # Utilisation de la version de Flutter suggérée par l'erreur de résolution de dépendances.
  # Cette version devrait inclure un SDK Dart compatible (>=3.4.0).
  FLUTTER_VERSION: "3.29.3"

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 30 # Augmenté au cas où le téléchargement d'une version plus récente de Flutter prendrait du temps

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          java-version: '17' # Java 17 est un bon choix pour les versions récentes de Gradle et Flutter.
          distribution: 'temurin'

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          # Le canal est 'stable' par défaut. Si '3.29.3' est sur un autre canal (beta, dev),
          # cette action essaiera de le trouver. Si cela échoue, nous pourrions avoir besoin
          # de spécifier le canal explicitement ou de le supprimer.
          channel: stable

      - name: Recreate Android project
        run: |
          echo "Current directory: $(pwd)"
          ls -la

          # Sauvegarde des fichiers essentiels
          echo "Backing up essential files..."
          mkdir _backup
          # Vérifier si les répertoires/fichiers existent avant de copier
          if [ -d "lib" ]; then cp -r lib _backup/; fi
          if [ -f "pubspec.yaml" ]; then cp pubspec.yaml _backup/; fi
          # Ajoutez d'autres fichiers/dossiers importants à sauvegarder ici si nécessaire
          # if [ -d "assets" ]; then cp -r assets _backup/; fi

          # Suppression du dossier android existant
          echo "Removing existing android directory..."
          rm -rf android

          # Recréation du projet Android
          # Le '.' indique de créer dans le répertoire courant.
          # flutter create tentera d'exécuter 'flutter pub get' en utilisant le pubspec.yaml existant.
          echo "Recreating Android project for 'caldec'..."
          flutter create --platforms android --project-name caldec .
          # Si cette étape échoue à cause de la résolution de dépendances,
          # c'est que la version de Flutter/Dart n'est toujours pas correcte ou que pubspec.yaml a un souci.

          # Restauration des fichiers
          echo "Restoring backed-up files..."
          if [ -d "_backup/lib" ]; then
            rm -rf lib # Supprimer le dossier lib potentiellement recréé par flutter create
            mv _backup/lib .
          fi
          if [ -f "_backup/pubspec.yaml" ]; then
            # Le pubspec.yaml original est déjà utilisé par 'flutter create .'
            # Le restaurer ici est redondant si 'flutter create .' a réussi pub get.
            # Cependant, si 'flutter create .' modifie pubspec.yaml (peu probable pour une simple recréation de plateforme),
            # cela assurerait que l'original est bien celui utilisé pour les étapes suivantes.
            # Pour l'instant, on garde cette restauration.
            mv _backup/pubspec.yaml .
          fi
          # Restaurez d'autres fichiers/dossiers ici si vous les avez sauvegardés
          # if [ -d "_backup/assets" ]; then
          #   rm -rf assets
          #   mv _backup/assets .
          # fi
          rm -rf _backup
          echo "Files restored."

          # Vérification de la structure du projet Android (supporte .gradle et .gradle.kts)
          echo "Verifying Android project structure..."
          if [ ! -f "android/app/build.gradle" ] && [ ! -f "android/app/build.gradle.kts" ]; then
            echo "::error::Android project not properly generated. Neither android/app/build.gradle nor android/app/build.gradle.kts found."
            echo "Listing contents of android/app/:"
            ls -la android/app/
            exit 1
          else
            echo "Android project structure seems OK."
            if [ -f "android/app/build.gradle" ]; then echo "Found android/app/build.gradle"; fi
            if [ -f "android/app/build.gradle.kts" ]; then echo "Found android/app/build.gradle.kts"; fi
          fi

      - name: Install dependencies (explicitly)
        run: |
          # Cette étape est une double vérification ou pour s'assurer que tout est à jour.
          # 'flutter create .' devrait déjà avoir exécuté 'pub get'.
          flutter pub get
          # flutter pub upgrade # Décommentez si vous voulez toujours les dernières versions compatibles des paquets.

      - name: Clean Flutter project
        run: flutter clean

      - name: Build APK
        run: |
          flutter build apk --release --verbose
          echo "Listing contents of APK output directory:"
          ls -la build/app/outputs/flutter-apk/

      - name: Verify APK
        run: |
          if [ ! -f "build/app/outputs/flutter-apk/app-release.apk" ]; then
            echo "::error::APK not generated at build/app/outputs/flutter-apk/app-release.apk"
            exit 1
          fi
          echo "APK generated successfully: build/app/outputs/flutter-apk/app-release.apk"

      - name: Upload APK
        uses: actions/upload-artifact@v4
        with:
          name: app-release
          path: build/app/outputs/flutter-apk/app-release.apk
          retention-days: 7
