name: Flutter Build Pipeline

on:
  push:
    branches: [main]
  workflow_dispatch:

env:
  # Utilisation de la version de Flutter suggérée par l'erreur de résolution de dépendances.
  # Cette version devrait inclure un SDK Dart compatible (>=3.4.0).
  FLUTTER_VERSION: "3.29.3"

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          java-version: '17' # Java 17 est un bon choix pour les versions récentes de Gradle et Flutter.
          distribution: 'temurin'

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          # 'channel' a été retiré pour permettre à l'action de trouver la version spécifique
          # même si elle n'est pas sur le canal 'stable'.
          # Si la version 3.29.3 est introuvable, cette étape peut échouer ou prendre une version par défaut.
          # Vérifiez les logs de cette étape attentivement.

      - name: Ensure pubspec.yaml and lib are present from checkout
        run: |
          echo "Checking for pubspec.yaml and lib directory..."
          if [ ! -f "pubspec.yaml" ]; then
            echo "::error::pubspec.yaml not found in checkout!"
            exit 1
          fi
          echo "pubspec.yaml found."
          if [ ! -d "lib" ]; then
            echo "::error::lib directory not found in checkout!"
            exit 1
          fi
          echo "lib directory found."
          echo "Contents of current directory:"
          ls -la

      - name: Recreate Android project specific files
        run: |
          echo "Current directory before Android recreation: $(pwd)"
          ls -la

          # Suppression du dossier android existant pour une recréation propre
          echo "Removing existing android directory..."
          rm -rf android
          echo "Android directory removed (if it existed)."

          # Recréation des fichiers spécifiques à la plateforme Android
          # 'flutter create --platforms android .' utilisera le pubspec.yaml existant
          # pour configurer le projet et exécutera 'flutter pub get' implicitement.
          echo "Recreating Android platform files using 'flutter create --platforms android .'"
          flutter create --platforms android .
          # Si cette étape échoue, examinez attentivement les messages d'erreur de Flutter ici.
          # Cela pourrait être dû à un problème de 'pub get' ou à une incompatibilité fondamentale.
          echo "'flutter create --platforms android .' command completed."

          # Vérification de la structure du projet Android
          echo "Verifying Android project structure post-creation..."
          echo "Listing contents of root directory:"
          ls -la
          echo "Listing contents of android/ directory:"
          ls -la android/
          echo "Listing contents of android/app/ directory:"
          ls -la android/app/

          if [ ! -f "android/app/build.gradle" ] && [ ! -f "android/app/build.gradle.kts" ]; then
            echo "::error::Android project not properly generated by 'flutter create .'. Neither android/app/build.gradle nor android/app/build.gradle.kts found in android/app/."
            exit 1
          else
            echo "Android project structure seems OK after 'flutter create .'."
            if [ -f "android/app/build.gradle" ]; then echo "Found android/app/build.gradle"; fi
            if [ -f "android/app/build.gradle.kts" ]; then echo "Found android/app/build.gradle.kts"; fi
          fi

      - name: Get dependencies (explicitly, as a safeguard)
        run: |
          # 'flutter create .' devrait déjà avoir exécuté 'pub get'.
          # Cette étape est une double vérification ou pour s'assurer que tout est à jour
          # avec le pubspec.yaml du checkout.
          echo "Running 'flutter pub get' explicitly..."
          flutter pub get
          echo "'flutter pub get' completed."

      - name: Clean Flutter project
        run: flutter clean

      - name: Build APK
        id: build_apk
        run: |
          echo "Starting APK build..."
          flutter build apk --release --verbose
          echo "APK build command finished. Listing contents of APK output directory:"
          ls -la build/app/outputs/flutter-apk/
        continue-on-error: false # Important: le workflow s'arrêtera si cette étape échoue.

      - name: Verify APK
        run: |
          if [ ! -f "build/app/outputs/flutter-apk/app-release.apk" ]; then
            echo "::error::APK not generated at build/app/outputs/flutter-apk/app-release.apk"
            exit 1
          fi
          echo "APK generated successfully: build/app/outputs/flutter-apk/app-release.apk"

      - name: Upload APK
        uses: actions/upload-artifact@v4
        with:
          name: app-release
          path: build/app/outputs/flutter-apk/app-release.apk
          retention-days: 7
